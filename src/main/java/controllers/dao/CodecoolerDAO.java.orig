package controllers.dao;

import models.CodecoolerModel;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

public class CodecoolerDAO implements CodecoolerDAOInterface {
    private Connection connection;
    private Statement statement;

<<<<<<< HEAD
    CodecoolerDAO(Connection connection) throws SQLException {
=======
    public CodecoolerDAO(Connection connection){
>>>>>>> dev
        this.connection = connection;
        statement = connection.createStatement();
    }

    @Override
    public int readCoins(int codecoolerId) {
<<<<<<< HEAD
        String query = "SELECT coolcoins FROM codecoolers WHERE id = " + codecoolerId + ";";
=======

        String query = "SELECT coolcoins FROM codecoolers WHERE codecooler_id = " + codecoolerId + ";";
>>>>>>> dev
        ResultSet resultSet = getResultSet(query);
        int coins = 0;
        try{
            while (resultSet.next()) {
                coins = resultSet.getInt("coolcoins");
            }
        }catch(SQLException e){
            e.printStackTrace();
        }
//18:30 wtorek5
        return coins;
    }

    public CodecoolerModel getCodecoolerModel(int codecoolerId){
<<<<<<< HEAD
        String codecoolerTableQuery = "SELECT * FROM Codecoolers WHERE codecooler_id = " + codecoolerId + ";";
        String teamsTableQuery = "SELECT team_name FROM Teams WHERE codecooler_id = " + codecoolerId + ";";
        String loginAccesQuery = "SELECT email FROM LoginAccess WHERE id = " + codecoolerId + ";";
        ResultSet resultSetCodecooler = null;
        ResultSet resultSetTeams = null;
        ResultSet resultSetLogin = null;
=======
        String codecoolerModelQuery = String.format("SELECT codecoolers.*, teams.id, login_access.email, login_access.password FROM codecoolers INNER JOIN" +
                " teams ON codecoolers.codecooler_id = teams.codecooler_id INNER JOIN login_access ON codecoolers.codecooler_id = login_access.id WHERE" +
                " codecoolers.codecooler_id = %d;", codecoolerId);
        ResultSet resultSetModel = null;
>>>>>>> dev
        CodecoolerModel codecoolerModel = null;

        try{
            resultSetCodecooler = statement.executeQuery(codecoolerTableQuery);
            resultSetTeams = statement.executeQuery(teamsTableQuery);
            resultSetLogin = statement.executeQuery(loginAccesQuery);
        }catch(SQLException e){
            System.err.println( e.getClass().getName()+": "+ e.getMessage() );
            System.out.println("Couldn't find selected query");
        }
        try{
<<<<<<< HEAD
            int coolcoins = resultSetCodecooler.getInt(2);
            int expLevel = resultSetCodecooler.getInt(3);//robocza nazwa
            String room = resultSetCodecooler.getString(4);
            int coolCoinsEverEarned = resultSetCodecooler.getInt(5);
            String questInProgress = resultSetCodecooler.getString(6);//robocza nazwa
            String first_name = resultSetCodecooler.getString(7);
            String second_name = resultSetCodecooler.getString(8);
            String nickName = resultSetCodecooler.getString(9);
            String email = resultSetLogin.getString(1);
            String teamID = resultSetTeams.getString(1);
//            codecoolerModel = new CodecoolerModel(codecoolerId, coolcoins, expLevel, room, coolCoinsEverEarned, questInProgress, first_name, second_name, nickName, email,teamID); TWOJE AKTUALNE, ZABITE BO BLOKUJE URUCHOMIENIE APLIKACJI
//            codecoolerModel = new CodecoolerModel(codecoolerId, first_name, second_name, email, nickName, password,
//                    1, coolcoins, expLevel, room, coolCoinsEverEarned, questInProgress, teamID)  uporządkowane, z passwordem, chcemy password w sumie tutaj trzymać czy nie? 1 = access level


=======
            while(resultSetModel.next()){
                int coolcoins = resultSetModel.getInt("coolcoins");
                int expLevel = resultSetModel.getInt("exp_level");//robocza nazwa
                int room = resultSetModel.getInt("actual_room");
                int coolCoinsEverEarned = resultSetModel.getInt("coolcoins_ever_earned");
                int questInProgress = resultSetModel.getInt("quest_in_progress");//robocza nazwa
                String first_name = resultSetModel.getString("first_name");
                String second_name = resultSetModel.getString("last_name");
                String nickName = resultSetModel.getString("nickname");
                int teamID = resultSetModel.getInt("id");
                String email = resultSetModel.getString("email");
                String password = resultSetModel.getString("password");

                codecoolerModel = new CodecoolerModel(codecoolerId, first_name, second_name, email, nickName, password,
                        1, coolcoins, expLevel, room, coolCoinsEverEarned, questInProgress, teamID);
            }


            //uporządkowane, z passwordem, chcemy password w sumie tutaj trzymać czy nie? 1 = access level
>>>>>>> dev

        }catch(SQLException e){
            e.printStackTrace();
        }
        return codecoolerModel;
    }

    @Override
    public int checkCoinsEverOwned(int id) {
        return 0;
    } //korzystanie

    @Override
    public String checkQuestInProgress(int id) {
        return null;
    } //korzystanie

    @Override
    public String readCodecoolerClass(int id) {
        return null;
    }

    @Override
    public String readTeamName(int id) {
        return null;
    } //korzystanie

    @Override
    public String getNickName(int id) {
        return null;
    }

    @Override
    public String getFirstName(int id) {
        return null;
    }

    @Override
    public String getSecondName(int id) {
        return null;
    }

    @Override
    public String getEmail(int id) {
        return null;
    } //korzystanie

    @Override
    public String readArtefacts() {
        return null;
    } //korzystanie

    @Override
<<<<<<< HEAD
    public String readEmailsCoolcoinsAndArtefacts(int codecoolerId) {

        return null;
    } //korzystnaie

=======
    public List<Artifact> readCodecoolersArtifacts(int codecoolerId) {
        String artifactsInPossessQuery = "SELECT artifact_id FROM artifacts_in_possess WHERE codecooler_id = " + codecoolerId + ";";
        String artifactsQuery = "SELECT * FROM artifacts ";
        List<Artifact> artifactsList = new ArrayList<>();
        ResultSet resultSetArtifactsPossessed = getResultSet(artifactsInPossessQuery);
        if(resultSetArtifactsPossessed != null) {
            String whereClauseIds = createWhereWithPossessedArtifacts(resultSetArtifactsPossessed);

            artifactsQuery += whereClauseIds;
            System.out.println(artifactsQuery);
            ResultSet resultSetArtifacts = getResultSet(artifactsQuery);

            artifactsList = createArtifactsList(resultSetArtifacts);

            System.out.println(artifactsQuery);
            System.out.println(artifactsList.size());
            return artifactsList;
        } else {
            return artifactsList;
        }

    } //korzystnaie

    private String createWhereWithPossessedArtifacts(ResultSet resultSetArtifactsPossessed){
        ResultSetMetaData resultSetMetaData;
        String whereClauseIds = "WHERE";
        try{
            resultSetMetaData = resultSetArtifactsPossessed.getMetaData();
            int columnsNumber = resultSetMetaData.getColumnCount();
            while(resultSetArtifactsPossessed.next()){
                for(int i = 1; i <= columnsNumber; i++){
                    if(i == columnsNumber){
                        whereClauseIds += " artifact_id = " + resultSetArtifactsPossessed.getInt(i) + ";";
                    }else{
                        whereClauseIds += " artifact_id = " + resultSetArtifactsPossessed.getInt(i) + " OR";
                    }

                }
            }
            System.out.println(columnsNumber);
        }catch(SQLException e){
            e.printStackTrace();
        }

        return whereClauseIds;
    }

    private List<Artifact> createArtifactsList(ResultSet resultSetArtifacts){
        List<Artifact> artifactsList = new ArrayList<>();
        try{
            while(resultSetArtifacts != null && resultSetArtifacts.next()){
                int id = resultSetArtifacts.getInt(1);
                String name = resultSetArtifacts.getString(2);
                String description = resultSetArtifacts.getString(3);
                int price = resultSetArtifacts.getInt(4);
                artifactsList.add(new Artifact(id,name ,description, price));
            }
        }catch(SQLException e){
            e.printStackTrace();
        }
        return artifactsList;
    }


>>>>>>> dev
    @Override
    public int getPriceOfArtefact(int artefactId) {
        String artefactsTableQuery = "SELECT price FROM Artifacts WHERE artifact_id = " + artefactId + ";";
        ResultSet resultSetArtefacts = getResultSet(artefactsTableQuery);
        int price = 0;
        try{
<<<<<<< HEAD
            price = resultSetArtefacts.getInt(1);
=======
            while (resultSetArtifacts.next()) {
                price = resultSetArtifacts.getInt(1);
            }
>>>>>>> dev
        }catch(SQLException e){
            e.printStackTrace();
        }

        return price;

    } //musthave

    @Override
<<<<<<< HEAD
    public void addNewPossesion(int codecoolerId, int artefactId) { //musthave
        String addPossesionQuery = "INSERT INTO ArtifactsInPossess (artifact_id, codecooler_id VALUES (\"" + artefactId +"\", \"" + codecoolerId +"\")";
        try{
            statement.executeQuery(addPossesionQuery);
=======
    public void addNewPossesion(int codecoolerId, int artifactId) { //musthave
        String addPossesionQuery = String.format("INSERT INTO artifacts_in_possess (artifact_id, codecooler_id) VALUES (%d, %d)", artifactId, codecoolerId );
        try{
            statement.executeUpdate(addPossesionQuery);
            connection.commit();
>>>>>>> dev
        }catch(SQLException e){
            e.printStackTrace();
        }
    }

    @Override
<<<<<<< HEAD
    public ArrayList<Integer> readTeamMembersId(int artefactId) {
        return null;
    } //musthave

    @Override
    public void subtractCodecoolersCoolcoins(int codecoolerId, int artefactPrice) {
        int coins = readCoins(codecoolerId) - artefactPrice;
        String updateCoinsQuery = "UPDATE Codecoolers SET coolcoins = " + coins + ";";
        try{
            statement.executeQuery(updateCoinsQuery);
=======
    public List<Integer> readTeamMembersId(int codecooler_id) {
        List<Integer> teamMembersId = new ArrayList<>();
        String teamNameQuery = "SELECT team_name FROM teams WHERE codecooler_id = " + codecooler_id + ";";
        ResultSet resultSetTeamName = getResultSet(teamNameQuery);
        String teamName = "";
        try{
            while (resultSetTeamName.next()) {
                teamName = resultSetTeamName.getString("team_name");
            }
        }catch(SQLException e){
            e.printStackTrace();
        }
        String codecoolersIdQuery = "SELECT codecooler_id FROM teams WHERE team_name = '" + teamName + "';";
        ResultSet resultSetCodecoolersId = getResultSet(codecoolersIdQuery);
        ResultSetMetaData resultSetMetaData;
        try{

            resultSetMetaData = resultSetCodecoolersId.getMetaData();
            int columnsNumber = resultSetMetaData.getColumnCount();
            while(resultSetCodecoolersId.next()){
                for(int i = 1; i <= columnsNumber; i++){
                   teamMembersId.add(resultSetCodecoolersId.getInt(1));
                }
            }
        }catch(SQLException e){
            e.printStackTrace();
        }

        return teamMembersId;
    } //musthave

    @Override
    public void subtractCodecoolersCoolcoins(int codecoolerId, int artifactPrice) {
        int coins = readCoins(codecoolerId) - artifactPrice;
        String updateCoinsQuery = String.format("UPDATE codecoolers SET coolcoins = %d WHERE codecooler_id = %d;", coins, codecoolerId);
        try{
            statement.executeUpdate(updateCoinsQuery);
            connection.commit();
>>>>>>> dev
        }catch(SQLException e){
            e.printStackTrace();
        }


    }

<<<<<<< HEAD
=======
    public void editCodecoolerTeam(int id, String teamName){
        String editTeamQuery = "UPDATE teams SET team_name = '" + teamName + "' WHERE codecooler_id = " + id + ";";
        try{
            statement.executeUpdate(editTeamQuery);
            connection.commit();
        }catch(SQLException e){
            e.printStackTrace();
        }

    }

    public void createNewTeam(int id, String teamName){
        String createTeamQuery = "INSERT INTO teams (team_name, codecooler_id) VALUES (" + "\'" + teamName + "\'," + id + ");";
        try{
            deleteTeam(id, "teams");
            statement.executeUpdate(createTeamQuery);
            connection.commit();
        }catch(SQLException e){
            e.printStackTrace();
        }
    }

>>>>>>> dev
    private ResultSet getResultSet(String query){
        ResultSet resultSet = null;
        try{
            resultSet = statement.executeQuery(query);
        }catch(SQLException e){
            System.out.println("Couldn't find selected query");
        }
        return resultSet;
    }
<<<<<<< HEAD
=======

    private void getStatement(){
        try{
            statement = connection.createStatement();
        }catch(SQLException e){
            e.printStackTrace();
        }

    }

    private void deleteTeam(int id, String table) throws SQLException{
        String deleteFromTeamQuery = "DELETE FROM " + table + " WHERE codecooler_id = " + id + ";";
        try{
            statement.executeUpdate(deleteFromTeamQuery);
        }catch(NullPointerException e){
            System.out.println("Nothing to delete!");
        }

    }
>>>>>>> dev
}
